1. Find the price per night of the first record in the listingsAndReviews collection.
db.listingsAndReviews.findOne().price OR
db.listingsAndReviews.findOne({},{price:1}) OR
db.listingsAndReviews.find({},{price:1}).limit(1)

2. Retrieve the cleaning fee of the first record in the listingsAndReviews collection.
db.listingsAndReviews.findOne().cleaning_fee OR
db.listingsAndReviews.findOne({},{cleaning_fee:1}) OR
db.listingsAndReviews.find({},{cleaning_fee:1}).limit(1)

3. Find the host_name, host_location, host_about of the first record in the listingsAndReviews collection.
db.listingsAndReviews.findOne({},{'host.host_name':1, 'host.host_location':1, 'host.host_about':1}) OR
db.listingsAndReviews.find().limit(1).forEach(function(doc) {
print("Host Name: " + doc.host.host_name);
print("Host Location: " + doc.host.host_location);
print("Host About: " + doc.host.host_about);
});

4. Retrieve the number of bedrooms in the first record in the listingsAndReviews collection.
db.listingsAndReviews.findOne().bedrooms OR
db.listingsAndReviews.findOne({},{bedrooms:1}) OR
db.listingsAndReviews.find({},{bedrooms:1}).limit(1)

5. Retrieve the number of guests are included in the first record in the listingsAndReviews collection.
db.listingsAndReviews.findOne().guests_included OR
db.listingsAndReviews.findOne({},{guests_included:1}) OR
db.listingsAndReviews.find({},{guests_included:1}).limit(1)


6. Write a MongoDB query to check whether the host have a profile picture in the first record in the listingsAndReviews collection.
db.listingsAndReviews.findOne({},{"host.host_has_profile_pic":1}) OR
db.listingsAndReviews.find({},{"host.host_has_profile_pic":1}).limit(1)

7. Write a MongoDB query to check whether the host's identity have been verified in the first record in the listingsAndReviews collection.
db.listingsAndReviews.findOne({},{"host.host_identity_verified":1}) OR
db.listingsAndReviews.find({},{"host.host_identity_verified":1}).limit(1)

8. Write a MongoDB query to find how many listings does the host have in the first records in the listingsAndReviews collection.
db.listingsAndReviews.findOne({},{"host.host_total_listings_count":1}) OR
db.listingsAndReviews.find({},{"host.host_total_listings_count":1}).limit(1)

9. Write a MongoDB query to find the street address of the first record in the listingsAndReviews collection.
db.listingsAndReviews.findOne({},{"address.street":1}) OR
db.listingsAndReviews.find({},{"address.street":1}).limit(1)

10. Find all the listings in the listingsAndReviews collection where the property_type field is set to "House".
db.listingsAndReviews.find({property_type: 'House'})

11. Find all the listings in the listingsAndReviews collection with listing_url, name, host_name, host_location, reviewer_name and price that have a nightly price greater than $500.
db.listingsAndReviews.find({price:{$gt:500}}, 
{listing_url:1,name:1, 'host.host_name':1, 'host.host_location':1 , 'reviews.reviewer_name':1, price:1})

12. Find all the listings in the listingsAndReviews collection that are located in Brazil and have a review score rating of at least 9. Return name, address, and review_scores_rating.
db.listingsAndReviews.find({ 'address.country': 'Brazil', 
'review_scores.review_scores_rating': { $gte: 9 } }, 
{ name: 1, address: 1, 'review_scores.review_scores_rating': 1 })

13. Find all the listings with name, address, reviewer_name, and review_scores_rating in the listingsAndReviews collection that have a "hot tub" amenity and are located in the United States.
db.listingsAndReviews.find({ amenities: 'Hot tub' , 'address.country' : 'United States'},
{name: 1, address: 1, 'reviews.reviewer_name': 1,'review_scores.review_scores_rating': 1 })

14. Find all the listings with name, amenities and price in the listingsAndReviews collection that have a "pool" amenity and a nightly price between $200 and $400.
db.listingsAndReviews.find({ amenities: 'Pool' , price:{$gte:200,$lte:400}},
{name:1, amenities:1, price:1})


15. Find all the listings with name, amenities and address in the listingsAndReviews collection that have a "Washer" amenity and are located in either Canada or Mexico.
 db.listingsAndReviews.find({ amenities: 'Washer' , 
$or:[ {'address.country' : 'Canada'}, {'address.country' : 'Mexico'} ] },
 {name: 1, amenities: 1 , address: 1})

16. Find the top 10 most reviewed listings with listing_url, name, country, review_scoresin the listingsAndReviews collection.

17. Find all the listings with listing_url, name, address and review_scores in the listingsAndReviews collection that have a "fireplace" amenity and a review score rating of at least 8.
db.listingsAndReviews.find({ amenities: 'fireplace', 
'review_scores.review_score_rating': { $gte: 8 } },
 { listing_url: 1, name: 1, address: 1, review_scores: 1 })

18. Find all the listings with listing_url, name, address and amenities, review scores in the listingsAndReviews collection that have a "washer" amenity and are located in either Italy or Spain.
db.listingsAndReviews.find({ amenities: 'Washer' , 
$or:[ {'address.country' : 'Italy'}, {'address.country' : 'Spain'} ] },
 {listing_url: 1, name:1,amenities: 1 , address: 1, review_scores:1})
19.Find the listings with listing_url, name, address and amenities, price, review scores in the listings And Reviews collection that have the highest nightly prices.
db.listingsAndReviews.find({ }, 
{ listing_url: 1, name: 1, address: 1, amenities:1, price:1, review_scores: 1 }).
sort({'price':-1}).
limit(1)

20.Find the listings with listing_url, name, address and amenities,price,review scores in the listingsAndReviews collection that have the lowest nightly prices.
db.listingsAndReviews.find({ }, 
{ listing_url: 1, name: 1, address: 1, amenities:1, price:1, review_scores: 1 }).
sort({'price':1}).
limit(1)

21. Retrieve all documents with name, address, reviewer_name, review_scores_rating in the listingsAndReviews collection that have a number_of_reviews field is equal to 0.
db.listingsAndReviews.find({number_of_reviews:0},
{ name: 1, address: 1, ' review_scores.review_scores_rating': 1 ,'reviews.reviewer_name':1})
OR
db.listingsAndReviews.find({number_of_reviews:{$eq:0}},
{ name: 1, address: 1, ' review_scores.review_scores_rating': 1 ,'reviews.reviewer_name':1})

22. Retrieve all documents with name, address, host, reviewer_name, review_scores_rating in the listingsAndReviews collection where the host_is_superhost field is equal to true.
db.listingsAndReviews.find({ 'host.host_is_superhost': true },
{ name: 1, address: 1, ' review_scores.review_scores_rating': 1, 'reviews.reviewer_name': 1, host: 1 })

23. Retrieve all documents with name, address, host, reviewer_name, review_scores_rating in the listingsAndReviews collection where the coordinates field is not null.
db.listingsAndReviews.find({'address.location.coordinates':{$ne:null}},
{name:1,address:1,host:1,' review_scores.review_scores_rating': 1, 'reviews.reviewer_name': 1})

24. Retrieve all documents with name, address, host, bed_type, bed, review_scores_rating from the listingsAndReviewscollection where the beds field is greater than or equal to 2.
db.listingsAndReviews.find({ beds: { $gte: 2 } }, 
{ name: 1, address: 1, host: 1, bed_type: 1, beds: 1, ' review_scores.review_scores_rating': 1, 'reviews.reviewer_name': 1 })

25. Find all listings with name, address, host in the listingsAndReviews collection that have a host with a host_name containing the word "Livia".
db.listingsAndReviews.find({ 'host.host_name': { $regex:/Livia/ }},
 {name: 1, address: 1,'host.host_name': 1})

26. Find all listings with name, address, host in the listingsAndReviews collection that have a host with a host_location of "Brazil".
db.listingsAndReviews.find({ 'host.host_location': 'Brazil'},
 {name: 1, address: 1,host' 1})

27. Retrieve all documents with name, address, host, availability in the listingsAndReviews collection where the availability_365 field is greater than 300.
db.listingsAndReviews.find({ 'availability.availability_365': {$gt:300}}, 
{name: 1, address: 1,host:1,'availability.availability': 1})

28. Retrieve all documents with listing_url, name, bedrooms, price in the listingsAndReviews collection where the bedrooms field is equal to 1.
db.listingsAndReviews.find({ bedrooms:1},
 {listing_url:1,name: 1, bedrooms:1,price:1})
OR
db.listingsAndReviews.find({ bedrooms:{$eq:1}},
 {listing_url:1,name: 1, bedrooms:1,price:1})

29. Retrieve all documents with listing_url, name, bedrooms, cleaning_fee, and price in the listingsAndReviews collection where the cleaning_fee field is not null.
db.listingsAndReviews.find({ cleaning_fee:{$ne:null}},
 {listing_url:1,name: 1, bedrooms:1,cleaning_fee:1,price:1})


30. Retrieve all documents with listing_url, name, bedrooms, price in the listingsAndReviews collection where the price field is between 600 and 900.
db.listingsAndReviews.find({ price:{$gte:600,$lte:900}},
 {listing_url:1,name: 1, bedrooms:1,price:1})

31. Retrieve all documents with listing_url, name, host, price in the listingsAndReviews collection where the host_verifications array contains "email".
db.listingsAndReviews.find({'host.host_verifications' : 'email'},
{listing_url:1,name: 1, host:1,price:1})
OR
db.listingsAndReviews.find( { "host.host_verifications": { "$in": ["email"] } }, { "listing_url": 1, "name": 1, "host": 1, "price": 1 } )

32. Retrieve all documents with listing_url, name, amenity, host in the listingsAndReviews collection where the amenities array contains both "TV" and "Wifi".
db.listingsAndReviews.find({ amenities: { $all: ["TV", "Wifi"] } }, 
{ listing_url: 1,name: 1, host: 1 ,amenities:1})
				OR
db.listingsAndReviews.find(
  { $and: [{ amenities: "TV" }, { amenities: "Wifi" }] },
  { listing_url: 1, name: 1, host: 1, amenities: 1 });


33. Find all listings with listing_url, name, amenities, host in the listingsAndReviews collection that have a host with a Jumio verification and about section not null.
db.listingsAndReviews.find( { $and: [{'host.host_verifications': 'jumio' },
 { 'host.host_about': {$ne:null} }] }, { listing_url: 1, name: 1, host: 1, amenities: 1 } )
				  	OR
db.listingsAndReviews.find({ 'host.host_verifications':'jumio','host.host_about':{$ne:null} }, { listing_url: 1, name: 1, host: 1, amenities: 1 } )
 34. Retrieve all documents with listing_url, name, host, price in the listingsAndReviews collection where the host_total_listings_count field is greater than 1.
db.listingsAndReviews.find({'host.host_total_listings_count':{$gte:1}},
{listing_url:1,name:1,host:1,price:1})

35. Retrieve all documents with listing_url, name, property_type, bed, price in the listingsAndReviews collection where the property_type field is equal to "Apartment" and the beds field is greater than or equal to 2.
db.listingsAndReviews.find({property_type: 'Apartment', beds:{$gte:2}},
{listing_url:1,name:1,property_type:1,beds:1,price:1})

36.Find all listings with listing_url, name, property_type, bed, bathrooms, price in the listingsAndReviews collection that have a minimum of 2 bathrooms.
 db.listingsAndReviews.find({ bathrooms: { $gte: 2 } }, 
{ listing_url: 1, name: 1, property_type: 1, beds: 1, bathrooms: 1, price: 1 })

37. Find all listings with listing_url, name, property_type, bed, price, guests_included in the listingsAndReviews collection that have a maximum of 5 guests included in the price.
 db.listingsAndReviews.find({ guests_included: { $lte: 5 } }, 
{ listing_url: 1, name: 1, property_type: 1, beds: 1, price: 1,guests_included:1 })

38. Find all listings with listing_url, name, property_type, bed, price, security_deposit in the listingsAndReviews collection that have a price greater than $500 and a security deposit of $1000 or more.
 db.listingsAndReviews.find({ price:{ $gt: 500 }  , security_deposit: { $gte: 1000 } }, 
{ listing_url: 1, name: 1, property_type: 1, beds: 1, price: 1,security_deposit:1 })

39. Find all listings with listing_url, name, property_type, bed, price, cancellation_policy in the listingsAndReviews collection that have a cancellation policy of "flexible".
db.listingsAndReviews.find({ cancellation_policy: 'flexible' }, 
{ listing_url: 1, name: 1, property_type: 1, beds: 1, price: 1,cancellation_policy:1 })

40. Find all listings with listing_url, name, property_type, bed_type, amenities, price in the listingsAndReviews collection that have a real bed as the bed type and a kitchen amenity.
db.listingsAndReviews.find({ bed_type: 'Real Bed', amenities: 'Kitchen' }, 
{ listing_url: 1, name: 1, property_type: 1, bed_type: 1, amenities:1, price: 1 })
OR
db.listingsAndReviews.find({ bed_type: 'Real Bed', amenities: {$in:['Kitchen']}  }, 
{ listing_url: 1, name: 1, property_type: 1, bed_type: 1, amenities:1, price: 1 })

41. Find all listings with listing_url, name, address, amenities in the listingsAndReviews collection that have a 24-hour check-in amenity and are located in Brazil.
db.listingsAndReviews.find({ 'address.country': 'Brazil', amenities: '24-hour check-in'  }, 
{ listing_url: 1, name: 1, address:1, amenities:1})
OR
db.listingsAndReviews.find({ 'address.country': 'Brazil', amenities: {$in:['24-hour check-in']}  }, 
{ listing_url: 1, name: 1, address:1, amenities:1})
OR
db.listingsAndReviews.find({ $and:[ { 'address.country': 'Brazil'} , {amenities: '24-hour check-in' } ]  }, 
{ listing_url: 1, name: 1, address:1, amenities:1})

42. Find all listings with listing_url, name, address, reviews in the listingsAndReviews collection that have at least one review.
db.listingsAndReviews.find( { number_of_reviews: {$gte:1}} , 
{ listing_url: 1, name: 1, address:1, reviews:1})
					OR
db.listingsAndReviews.find( { reviews: { $exists: true, $not: { $size: 0 } } }, 
{ listing_url: 1, name: 1, address: 1, number_of_reviews: 1 } )

43. Find the number of documents that have a blank medium picture url in the listingsAndReviews collection.
db.listingsAndReviews.find( { 'images.medium_url': '').count()
					OR
db.listingsAndReviews.countDocuments({ "images.medium_url": "" });

44. Find all listings with listing_url, name, address, availability_30 in the listingsAndReviews collection that have an availability of at least 30 days.
db.listingsAndReviews.find({'availability.availability_30': {$gte:30} },
{listing_url:1, name:1, address:1, 'availability.availability_30':1})

45. Find all listings with listing_url, name, address in the listingsAndReviews collection that have a suburb of "Lagoa".
db.listingsAndReviews.find({ 'address.suburb': 'Lagoa' }, 
{ listing_url: 1, name: 1, address: 1 })

46. Find all listings with listing_url, name, address, host in the listingsAndReviews collection that have a host who is a superhost and has at least 2 listings.
db.listingsAndReviews.find({"host.host_is_superhost": true, "host.host_total_listings_count": { $gte: 2 } },
{listing_url: 1, name: 1, address: 1, host: 1 } )

47. Find all listings with listing_url, name, address, host in the listingsAndReviews collection that have a host who has a profile pic and has been identity verified.
db.listingsAndReviews.find( { "host.host_has_profile_pic": true, "host.host_identity_verified": true }, 
{ listing_url: 1, name: 1, address: 1, host: 1 } )

48. Write a mongodb query to find the listing_url, name, address, host_verifications, and size of host_verification under the host subdocument in the listingsAndReviews collection.
db.listingsAndReviews.aggregate([ { $project:
 { "listing_url": 1, "name": 1, "address": 1, "host_verifications": "$host.host_verifications", 
"host_verifications_count": { $size: "$host.host_verifications" } } }] )

49. Find all listings with listing_url, name, address, host_verificationand size of host_verification array in the listingsAndReviews collection that have a host with at least 3 verifications.

50. Find all listings with listing_url, name, address, host_picture_url in the listingsAndReviews collection that have a host with a picture url.
db.listingsAndReviews.find({ "host.host_picture_url": { $exists: true, $ne: null } } ,
{ listing_url: 1, name: 1, address: 1, "host.host_picture_url": 1 } )


